<!DOCTYPE markdown><!-- markdownlint-disable no-inline-html -->
<meta charset="utf-8" content="text/markdown" lang="en">
<!-- -## editors ## (emacs/sublime) -*- coding: utf8-nix; tab-width: 4; mode: markdown; indent-tabs-mode: nil; basic-offset: 2; st-word_wrap: 'true' -*- ## (jEdit) :tabSize=4:indentSize=4:mode=markdown: ## (notepad++) vim:tabstop=4:syntax=markdown:expandtab:smarttab:softtabstop=2 ## modeline (see <https://archive.is/djTUD>@@<http://webcitation.org/66W3EhCAP> ) -->
<!-- spell-checker:ignore expandtab markdownlint modeline smarttab softtabstop -->
<!-- spell-checker:words unencrypted -->
<!-- spell-checker:ignore CICD gitignore githooks repo -->

# DevOps with `git`, `gpg`, and a single secret (aka "With a Single Secret")

This repository contains encrypted secrets for use in CICD, VM, and other DevOps applications. Additionally, the repository contains a pre-commit hook, setup and audit scripts, and a *.gitignore* which help assure that no unencrypted information is accidentally committed to the repository.

However, even when encrypted with strong encryption and passwords, the secrets committed here should be considered semi-compromised and rotated with some planned frequency.

## Local clones

To setup a new local repository, enabling pre-commit protection:

1. clone the repository, and then
2. use `./#setup.repo.githooks.{BAT,sh}` to initialize the `git` hook architecture.

After this initial setup, the 'pre-commit' hook (in combination with *.gitignore*) will make it difficult to inadvertently commit any unencrypted files to the repository.

## Adding and retrieving secrets

After setting the *secret* passphrase on a source machine (eg, `set PW=...` or `PW=...`), use `gpg --batch --passphrase "$PW" --symmetric FILE` to encrypt the file and then push it to the repository (eg, `git push`). On the receiving client machine(s), clone and pull the information from the repository (eg, `git pull`) and then use `gpg --batch --passphrase "$PW" --decrypt FILE` to decrypt the information.
